plugins {
    id "application"
}
group 'io.cloudgrey.appiumpro'
//version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.11

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
    maven { url "https://repo.maven.apache.org/maven2" }
}

dependencies {
    implementation 'org.testng:testng:6.14.3'
    implementation 'junit:junit:4.12'
    testCompile group: 'org.testng', name: 'testng', version: '6.14.3'
    compile 'log4j:log4j:1.2.17'
    testCompile group: 'log4j', name: 'log4j', version:'1.2.17'
    testCompile group: 'io.appium', name: 'java-client', version: '7.3.0'
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.13.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
    testCompile group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.3.9'
    testCompile group: 'org.zeroturnaround', name: 'zt-exec', version: '1.10'
    testCompile group: 'me.xdrop', name: 'fuzzywuzzy', version: '1.2.0'
    testCompile group: 'io.appium', name: 'mitmproxy-java', version: '1.6.1'
    testCompile group: 'com.applitools', name: 'eyes-appium-java4', version: '4.2.1'
    testCompile group: 'com.github.testdotai', name: 'classifier-client-java', version: '1.0.0'
    testCompile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
}

//test {
//    outputs.upToDateWhen {false}
//    useJUnit()
//    testLogging {
//        exceptionFormat = 'full'
//        showStandardStreams = true
//    }
//    maxParallelForks = 3
//    forkEvery = 1
//}

task copyJarsToLib (type: Copy) {
    def toDir = "build/libs/dependency-jars"

    // create directories, if not already done:
    file(toDir).mkdirs()

    // copy jars to lib folder:
    from configurations.compile
    into toDir
}

task marshallClasspathDeps(type: Copy) {
    from sourceSets.test.runtimeClasspath
    // if you need this from the dependencies in the build.gradle then it should be :
    // from sourceSets.main.runtimeClasspath
    include '**/*.class'
    include '**/*.jar'
    exclude { FileTreeElement details ->
        details.file.name.contains('Edition') || details.file.name.contains('kotlin')
    }
    into 'build/libs/dependency-jars'
}

build.dependsOn(marshallClasspathDeps)

task buildJar(dependsOn:classes,type: Jar) {
    // exclude log properties (recommended)
    exclude ("log4j.properties")

    // make jar executable: see http://stackoverflow.com/questions/21721119/creating-runnable-jar-with-gradle
    manifest {
        attributes (
                'Main-Class': 'com.example.appium.Runner',
                // add classpath to Manifest; see http://stackoverflow.com/questions/30087427/add-classpath-in-manifest-file-of-jar-in-gradle
                "Class-Path": '. dependency-jars/' + sourceSets.test.runtimeClasspath.collect { it.getName() }.join(' dependency-jars/')
        )
    }
    baseName = "AppiumTests"
    from sourceSets.test.output
    include 'com/example/appium/*.class'

}

// always call copyJarsToLib when building jars:
buildJar.dependsOn copyJarsToLib
build.dependsOn(buildJar)

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class" // whatever Ant pattern matches your test class files
}

task(runAppium, dependsOn: 'classes', type: JavaExec) {
    main = 'com.example.appium.Runner'
    mainClassName = main
    classpath = sourceSets.test.runtimeClasspath
}

//ext {
//    javaMainClass = "com.example.appium.Runner"
//}
//
//application {
//    mainClassName = javaMainClass
//}